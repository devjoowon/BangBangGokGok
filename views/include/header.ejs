<head>
    <meta charset="UTF-8" />
    <title>Headers - 4</title>
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <link rel="stylesheet" href="styles/reset.min.css" />
    <link rel="stylesheet" href="styles/style.css" />
    <link rel="stylesheet" href="/static/css/header.css" />
</head>
<body>
    <!-- Header Start -->
    <nav class="navbar navbar-expand-lg">
        <div class="container-fluid">
            <a id="logo" href="/">
                <img src="/static/css/image/logo.png" alt="BBGG 로고" />
            </a>

            <div id="menu">
                <a id="btn-chat" href="#"></a>

                <a id="btn-mypage" href="../../posts/list">둘러보기</a>

                <a id="btn-user" href="#"></a>

                <a id="btn-login" type="submit" href="../../users/signin"> Login </a>
            </div>
            <div class="submenu">
                <div class="profile-card">
                    <div class="profile-banner">
                        <div class="profile-profile"></div>
                    </div>
                    <div><h2 id="profile-name"></h2></div>
                    <br />
                    <div id="graphContainer" class="centered-graph"></div>
                    <br />
                    <br />
                    <a id="btn-profile">Mypage</a>
                </div>
            </div>
        </div>
    </nav>
    <!-- Header End -->
    <script>
        // 유저 정보
        (async () => {
            const info = document.getElementById("info");
            const accessToken = localStorage.getItem("accessToken");

            let data = "";
            if (!accessToken) {
                data = '<a href="/users/signin">로그인</a>';
            } else {
                const response = await axios({
                    method: "POST",
                    url: "/users/accesstoken",
                    headers: {
                        Authorization: `Bearer ${accessToken}`,
                    },
                });
                if (response.data.result) {
                    // 사용자 이름을 포함한 데이터 생성

                    // 로그인 버튼을 로그아웃 버튼으로 변경
                    const loginButton = document.getElementById("btn-login");
                    loginButton.innerHTML = "logout";
                    loginButton.removeAttribute("href"); // 로그인 링크 제거
                    loginButton.onclick = signout; // onclick 이벤트에 signout 함수 할당

                    const userButton = document.getElementById("btn-user");
                    userButton.innerHTML = `${response.data.nickname}님`;

                    const profile_name = document.getElementById("profile-name");
                    profile_name.innerHTML = `${response.data.nickname}님`;

                    const profileButton = document.getElementById("btn-profile");
                    profileButton.href = `/users/mypage/${response.data.id}`;

                    const chatButton = document.getElementById("btn-chat");
                    chatButton.innerHTML = `채팅방`;
                    chatButton.href = `/chats/lists/${response.data.id}`;
                    // userButton.href = `/users/mypage/${response.data.id}`;
                    const graphContainer = document.getElementById("graphContainer");
                    const svgWidth = 200; // SVG의 최대 너비
                    const distanceMaxValue = 100; // distance 값의 최대값
                    const distanceValue = response.data.distance; // 실제 distance 값
                    const scaledWidth = (svgWidth * distanceValue) / distanceMaxValue; // 비례식을 사용하여 너비 계산

                    const textColor = distanceValue < 30 ? "black" : "white"; // distance 값이 30 미만이면 검은색, 아니면 흰색

                    const svgString =
                        '<div class="graph">' +
                        '<svg width="200" height="30">' +
                        "<rect " +
                        'x="0" ' +
                        'y="0" ' +
                        'width="' +
                        scaledWidth +
                        '" ' + // 계산된 너비 사용
                        'height="30" ' +
                        (distanceValue > 66
                            ? 'fill="#FF6F0F"'
                            : distanceValue > 33
                            ? 'fill="#C55A11"'
                            : 'fill="#843C0C"') +
                        "></rect>" +
                        '<text x="' +
                        (scaledWidth / 2 - 10) +
                        '" y="20" fill="' +
                        textColor +
                        '">' + // 조건에 따라 텍스트 색상 변경
                        distanceValue +
                        "km</text>" +
                        "</svg>" +
                        "</div>";
                    graphContainer.innerHTML = svgString;
                }
            }
            // info.innerHTML = data; // 로그인 버튼 나오도록 하기
        })();

        //async function chatList() {
        //    const accessToken = localStorage.getItem("accessToken");
        //    const chatButton = document.getElementById("btn-chat");
        //    console.log("===========클릭");
        //    if (!accessToken) {
        //        chatButton.href = "#";
        //    } else {
        //        const response = await axios({
        //            method: "POST",
        //           url: "/users/accesstoken",
        //           headers: {
        //               Authorization: `Bearer ${accessToken}`,
        //            },
        //        });
        //        const requestData = {
        //            id: response.data.id,
        //        };
        //        const id = response.data.id;
        //       const apiUrl = `/chats/lists/${id}`;
        //        const headers = {
        //            Authorization: `Bearer ${accessToken}`,
        //        };

        //        console.log("apiUrl", apiUrl);
        //      fetch(apiUrl, {
        //            method: "GET",
        //            headers: headers,
        //        }).then((data) => {
        //            console.log("API 응답:", data.url);
        // window.location.href = data.url;
        //        });
        //    }
        //}

        function signout() {
            // 로컬 스토리지에서 jwt 정보 삭제
            localStorage.clear();

            // 새로고침으로 뷰 화면 변경
            // document.location.href="../../../#";
            document.location.reload();
        }
        let profile = document.getElementById("btn-user");
        let menu = document.querySelector(".submenu");
        profile.onclick = function () {
            menu.classList.toggle("active");
        };
    </script>
</body>
