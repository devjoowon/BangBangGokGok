<!-- 게시글 상세페이지 -->
<!DOCTYPE html>
<html lang="ko">
    <head>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <title>게시글 상세 페이지</title>
        <%-include('../include/head')%>
        <link rel="stylesheet" href="/static/css/postDetail.css" />
    </head>
    <body>
        <div class="container">
            <div class="left">
                <img src="<%= postDetail.file %>" alt="img_main" class="img_main" />
                <div class="author">작성자: <%= postDetail.User.nickname %></div>
            </div>
            <div class="right">                   
                    <form id="patchForm">
                        <input type="text" id="title" name="title" value="<%= postDetail.title %>">
                        <select id="category" name="category">
                            <option value="서울" <%= postDetail.category === '서울' ? 'selected' : '' %>>서울</option>
                            <option value="경기도" <%= postDetail.category === '경기도' ? 'selected' : '' %>>경기도</option>
                            <option value="강원도" <%= postDetail.category === '강원도' ? 'selected' : '' %>>강원도</option>
                            <option value="충청북도" <%= postDetail.category === '충청북도' ? 'selected' : '' %>>충청북도</option>
                            <option value="충청남도" <%= postDetail.category === '충청남도' ? 'selected' : '' %>>충청남도</option>
                            <option value="전라북도" <%= postDetail.category === '전라북도' ? 'selected' : '' %>>전라북도</option>
                            <option value="전라남도" <%= postDetail.category === '전라남도' ? 'selected' : '' %>>전라남도</option>
                            <option value="경상북도" <%= postDetail.category === '경상북도' ? 'selected' : '' %>>경상북도</option>
                            <option value="경상남도" <%= postDetail.category === '경상남도' ? 'selected' : '' %>>경상남도</option>
                            <option value="제주도" <%= postDetail.category === '제주도' ? 'selected' : '' %>>제주도</option>
                        </select>
                        <textarea name="content" id="content" cols="30" rows="10"><%= postDetail.content %></textarea>
                    </form>

                <div class="icons">
                        <button class="btn_edit" id="btn_edit" onclick="updatePost('<%= postDetail.p_seq %>')">수정하기</button>
                        <button class="btn_delete" id="btn_delete" onclick="deletePost('<%= postDetail.p_seq %>')">삭제하기</button>
                </div>
            </div>
        <script>
(async () => {
    const accessToken = localStorage.getItem("accessToken");
    const iconsDiv = document.querySelector(".icons");

    // 하트 아이콘과 채팅 버튼 추가 함수
    function addInteractiveIcons() {
        const heartIcon = document.createElement("i");
        heartIcon.className = "bi bi-heart";
        heartIcon.id = "heart-icon";

        const chatButton = document.createElement("button");
        chatButton.textContent = "채팅하기";
        chatButton.className = "btn_chat";

        iconsDiv.appendChild(heartIcon);
        iconsDiv.appendChild(chatButton);

        heartIcon.addEventListener("click", function () {
            this.classList.toggle("bi-heart");
            this.classList.toggle("bi-heart-fill");
        });
    }

    // 게시글 작성자가 아니거나 로그인하지 않은 사용자에 대한 편집 기능 비활성화
    function disableEdit() {
        document.getElementById("btn_edit").style.display = "none";
        document.getElementById("btn_delete").style.display = "none";
        document.getElementById("title").disabled = true;
        document.getElementById("category").disabled = true;
        document.getElementById("content").disabled = true;

        // 하트 아이콘과 채팅 버튼 추가
        addInteractiveIcons();
    }

    // accessToken이 존재하는 경우에만 사용자를 확인
    if (accessToken) {
        try {
            const response = await axios({
                method: "POST",
                url: "/posts/accesstoken",
                headers: {
                    Authorization: `Bearer ${accessToken}`,
                },
            });

            if (response.data.result) {
                const currentUserNickname = response.data.nickname;
                const authorNickname = '<%= postDetail.User.nickname %>';

                if (currentUserNickname !== authorNickname) {
                    disableEdit();
                } else {
                    // 작성자와 로그인한 사용자가 일치하는 경우
                    document.getElementById("btn_edit").style.display = "block";
                    document.getElementById("btn_delete").style.display = "block";
                }
            } else {
                console.log("사용자 정보 가져오기 실패");
                disableEdit();
            }
        } catch (error) {
            console.error("사용자 정보 가져오기 에러:", error);
            disableEdit();
        }
    } else {
        // accessToken이 없으면 로그인하지 않은 것으로 처리
        disableEdit();
    }
})();

    async function deletePost(postId) { //postId가 맞는지?
        try {
            const accessToken = localStorage.getItem("accessToken");
            const response = await axios({
                method: "DELETE",
                url: `/posts/detail/${postId}`, // 삭제할 게시글의 ID를 URL에 포함
                headers: {
                    Authorization: `Bearer ${accessToken}`,
                },
            });

        if (response.status === 200) {
            alert('게시글이 성공적으로 삭제되었습니다.');
                window.location.href = '/posts/list';
        }
        } catch (error) {
            console.error(error);
            alert('게시글 삭제에 실패했습니다.');
            }
    }

    async function updatePost(postId) {
    try {
        const title = document.getElementById("title").value;
        const category = document.getElementById("category").value;
        const content = document.getElementById("content").value;
        const accessToken = localStorage.getItem("accessToken");

        const response = await axios({
            method: "PATCH",
            url: `/posts/detail/${postId}`,
            data: JSON.stringify({ title, category, content }),
            headers: {
                'Authorization': `Bearer ${accessToken}`,
                'Content-Type': 'application/json',
            },
        });

        if (response.status === 200) {
            alert('게시글이 성공적으로 수정되었습니다.');
            window.location.href = `/posts/detail/${postId}`;
        }
    } catch (error) {
        console.error(error);
        alert('게시글 수정에 실패했습니다.');
    }
    }        
        </script>
    </body>
</html>
