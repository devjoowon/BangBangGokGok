<!-- 게시글 상세페이지 -->
<!DOCTYPE html>
<html lang="ko">
    <head>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <title>게시글 상세 페이지</title>
        <%-include('../include/head')%>
        <%-include('../include/header')%>
        <link rel="stylesheet" href="/static/css/postDetail.css" />
    </head>
    <script>
        // 유저 정보
        let currentUserInfo = {};

        function createChat(){
            const accessToken = localStorage.getItem("accessToken");
            if (!accessToken) {
                const confirmLogin = confirm("채팅을 하려면 로그인이 필요합니다. 로그인하시겠습니까?");
                if (confirmLogin) {
                    window.location.href = "/users/signin";
                }
                return;
            }else{
                axios.post('/chats/rooms/', { 
                    b_nick: '<%= postDetail.User.nickname %>',
                    b_seq: '<%= postDetail.User.u_seq %>',
                    u_seq: currentUserInfo.u_seq,
                    u_nick: currentUserInfo.nickname,
                    id: currentUserInfo.id,
                    p_seq:'<%= postDetail.p_seq %>'
                }, {
                    headers: {
                        Authorization: `Bearer ${accessToken}`,
                    },
                })
                .then((response)=> {
                    if(response.data.c_seq){
                        const apiUrl = `/chats/rooms/${response.data.c_seq}?id=${response.data.id}`;
                        window.location.href = apiUrl;
                    }
                })
                .catch(function(error) {
                    alert('채팅방 생성에 실패했습니다.');
                });
            }
        }
        (async () => {
            const accessToken = localStorage.getItem("accessToken");
            try {
                const response = await axios({
                method: "POST",
                url: "/posts/accesstoken",
                headers: {
                    Authorization: `Bearer ${accessToken}`,
                },
            });
                currentUserInfo = response.data;

                function disableEdit() {
                    document.getElementById("btn_edit").style.display = "none";
                    document.getElementById("btn_delete").style.display = "none";
                    document.getElementById("is_success").disabled = true;
                    document.getElementById("title").disabled = true;
                    document.getElementById("category").disabled = true;
                    document.getElementById("content").disabled = true;
                    document.getElementById("deal").disabled = true;
                }

                function disableHeart() {
                    document.getElementById("like-count").style.display = "none";
                    document.getElementById("heart-icon").style.display = "none";
                    document.getElementById("btn_edit").style.display = "none";
                    document.getElementById("btn_delete").style.display = "none";
                    document.getElementById("title").disabled = true;
                    document.getElementById("category").disabled = true;
                    document.getElementById("content").disabled = true;
                }

                // 게시글 작성자가 아니거나 로그인하지 않은 사용자에 대한 편집 기능 비활성화
                if(!accessToken){
                    disableHeart();
                }else if ('<%= postDetail.User.nickname %>' != currentUserInfo.nickname) {
                    disableEdit();   
                }else{
                    // 작성자와 로그인한 사용자가 일치하는 경우
                    document.getElementById("btn_edit").style.display = "block";
                    document.getElementById("btn_delete").style.display = "block";
                    document.getElementById("heart-icon").style.display = "none";
                    document.getElementById("btn_chat").style.display = "none";
                    document.getElementById("like-count").style.display = "none";
                }
            } catch (error) {
                console.error("사용자 정보 가져오기 에러:", error);
            }
            
             if('<%= postDetail.is_success %>' === 'true') {
                    document.getElementById("btn_chat").style.backgroundColor = "gray";
                    document.getElementById("btn_chat").innerText = "거래완료";    
                    document.getElementById("btn_chat").disabled = true;
                }
        })();
    

    async function deletePost(postId) {
        try {
            const accessToken = localStorage.getItem("accessToken");
            const response = await axios({
                method: "DELETE",
                url: `/posts/detail/${postId}`,
                headers: {
                    Authorization: `Bearer ${accessToken}`,
                },
            });

            if (response.status === 200) {
                alert('게시글이 성공적으로 삭제되었습니다.');
                window.location.href = '/posts/list';
            }
        } catch (error) {
            alert('게시글 삭제에 실패했습니다.');
            }
        }

    async function updatePost(postId) {
        try {
            const is_success = document.getElementById("is_success").value;
            const title = document.getElementById("title").value;
            const category = document.getElementById("category").value;
            const content = document.getElementById("content").value;
            const deal_type = document.getElementById("deal").value;
            const accessToken = localStorage.getItem("accessToken");

            const response = await axios({
                method: "PATCH",
                url: `/posts/detail/${postId}`,
                data: JSON.stringify({ is_success, title, category, content, deal_type }),
                headers: {
                    'Authorization': `Bearer ${accessToken}`,
                    'Content-Type': 'application/json',
                },
            });

            if (response.status === 200) {
                alert('게시글이 성공적으로 수정되었습니다.');
                window.location.href = `/posts/list`;
                 
            }
        } catch (error) {
            alert('게시글 수정에 실패했습니다.');
        }
    }

    document.addEventListener('DOMContentLoaded', async function() {
    await fetchLikesCount(); // 좋아요 수 조회
    await checkLikeStatus(); // 사용자의 좋아요 상태 확인
});

async function checkLikeStatus() {
    const accessToken = localStorage.getItem("accessToken");
    if (!accessToken) return;

    try {
        const response = await axios.get(`/likes/status/${'<%= postDetail.p_seq %>'}`, {
            headers: { Authorization: `Bearer ${accessToken}` },
        });
        if (response.data.isLiked) {
            const heartIcon = document.getElementById("heart-icon");
            heartIcon.classList.remove("bi-heart");
            heartIcon.classList.add("bi-heart-fill");
        }
    } catch (error) {
        console.error('좋아요 상태 조회 실패:', error);
    }
}

async function fetchLikesCount() {
    try {
        const response = await axios.get(`/likes/${'<%= postDetail.p_seq %>'}`);
        document.getElementById("like-count").innerText = response.data.likesCount;
    } catch (error) {
        console.error('좋아요 수 조회 실패:', error);
    }
}

async function clickHeart() {
    const accessToken = localStorage.getItem("accessToken");
    if (!accessToken) {
        alert("좋아요를 누르려면 로그인이 필요합니다.");
        return;
    }

    const heartIcon = document.getElementById("heart-icon");
    const isLiked = heartIcon.classList.contains("bi-heart-fill");

    try {
        if (isLiked) {
            // 좋아요 취소 요청
            await axios.delete('/likes', {
                headers: { Authorization: `Bearer ${accessToken}` },
                data: { currentPseq: '<%= postDetail.p_seq %>' }
            });
            heartIcon.classList.remove("bi-heart-fill");
            heartIcon.classList.add("bi-heart"); // 빈 하트로 변경
        } else {
            // 좋아요 추가 요청
            await axios.post('/likes', {
                currentPseq: '<%= postDetail.p_seq %>'
            }, {
                headers: { Authorization: `Bearer ${accessToken}` }
            });
            heartIcon.classList.remove("bi-heart");
            heartIcon.classList.add("bi-heart-fill"); // 채워진 하트로 변경
        }
    } catch (error) {
        console.error('좋아요 처리 실패:', error);
    }

    fetchLikesCount(); // 좋아요 수 업데이트
}
</script>
    <body>
        <div class="container">
            <div class="left">
                <button type="button" id="btn-back" onclick="window.history.back();">이전으로</button>
                <br>
                <img src="/uploads/<%= postDetail.file %>" alt="img_main" class="img_main" onerror="this.onerror=null; this.src='/static/image/img_default.jpg';"/>
                <div class="author">작성자: <%= postDetail.User.nickname %>&nbsp;&nbsp;&nbsp;&nbsp;
                    <svg width="210" height="40">
                        <!-- 테두리를 위한 더 큰 rect 추가 -->
                        <rect
                            x="0"
                            y="0"
                            width="210"
                            height="40"
                            fill="none"
                            stroke="black" 
                            stroke-width="2" 
                        ></rect>
                        <!-- 기존 rect 요소, 이전보다 x, y 좌표를 조금씩 옮겨 내부에 위치하도록 조정 -->
                        <rect
                            x="5" 
                            y="5" 
                            width="<%= Math.max(50, postDetail.User.distance * 2) %>"
                            height="30"
                            <%
                            if (postDetail.User.distance > 66) { %> fill="#FF6F0F"
                            <% } else if (postDetail.User.distance > 33) { %> fill="#C55A11"
                            <% } else { %> fill="#843C0C"
                            <% } %>
                        ></rect>
                        <text x="15" y="25" fill="white"><%= postDetail.User.distance %>km</text>
                    </svg>
                </div>
            </div>
            <div class="right">
                <div class="post-header">
                </div>                   
                <form id="patchForm">
                    <div id="date_container">
                        <select id="is_success" name="is_success">
                            <option value="false" <%= postDetail.is_success ? 'selected' : '' %>>거래중</option>
                            <option value="true" <%= postDetail.is_success ? 'selected' : '' %>>거래완료</option>
                        </select>
                        <select id="deal" name="deal">
                            <option value="false" <%= postDetail.deal_type ? 'selected' : '' %>>사드려요</option>
                            <option value="true" <%= postDetail.deal_type ? 'selected' : '' %>>구해요</option>
                        </select>
                        <span><%= postDetail.date.toLocaleDateString('ko-KR') %></span>
                    </div>
                    <input type="text" id="title" name="title" value="<%= postDetail.title %>">
                    <select id="category" name="category">
                        <option value="서울" <%= postDetail.category === '서울' ? 'selected' : '' %>>서울</option>
                        <option value="경기도" <%= postDetail.category === '경기도' ? 'selected' : '' %>>경기도</option>
                        <option value="강원도" <%= postDetail.category === '강원도' ? 'selected' : '' %>>강원도</option>
                        <option value="충청북도" <%= postDetail.category === '충청북도' ? 'selected' : '' %>>충청북도</option>
                        <option value="충청남도" <%= postDetail.category === '충청남도' ? 'selected' : '' %>>충청남도</option>
                        <option value="전라북도" <%= postDetail.category === '전라북도' ? 'selected' : '' %>>전라북도</option>
                        <option value="전라남도" <%= postDetail.category === '전라남도' ? 'selected' : '' %>>전라남도</option>
                        <option value="경상북도" <%= postDetail.category === '경상북도' ? 'selected' : '' %>>경상북도</option>
                        <option value="경상남도" <%= postDetail.category === '경상남도' ? 'selected' : '' %>>경상남도</option>
                        <option value="제주도" <%= postDetail.category === '제주도' ? 'selected' : '' %>>제주도</option>
                    </select>
                    <textarea name="content" id="content" cols="30" rows="10"><%= postDetail.content %></textarea>
                </form>
                <div class="icons">
                        <div class="btn_left">
                            <button class="btn_edit" id="btn_edit" onclick="updatePost('<%= postDetail.p_seq %>')">수정하기</button>
                            <i class="bi bi-heart" id="heart-icon" onclick="clickHeart()"></i>
                            <span id="like-count">0</span>    
                        </div>
                        <div class="btn_right">
                            <button class="btn_delete" id="btn_delete" onclick="deletePost('<%= postDetail.p_seq %>')">삭제하기</button>
                            <button class="btn_chat" id="btn_chat" onclick="createChat()">채팅하기</button>
                        </div>
                </div>
            </div>
            
    </body>
</html>