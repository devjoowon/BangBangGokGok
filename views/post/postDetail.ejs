<!-- 게시글 상세페이지 -->
<!DOCTYPE html>
<html lang="ko">
    <head>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <title>게시글 상세 페이지</title>
        <%-include('../include/head')%>
        <link rel="stylesheet" href="/static/css/postDetail.css" />
    </head>
    <body>
        <div class="container">
            <div class="left">
                <img src="" alt="img_main" class="img_main" />
                <!--괄호 퍼센트 imgSrc  -->
                <div class="author">작성자: <%= postDetail.User.nickname %></div>
            </div>
            <div class="right">
                <div class="post-header">
                </div>                   
                <form id="patchForm">
                    <span id="like-count" class="like-count">0</span>
                    <input type="text" id="title" name="title" value="<%= postDetail.title %>">
                    <select id="category" name="category">
                        <option value="서울" <%= postDetail.category === '서울' ? 'selected' : '' %>>서울</option>
                        <option value="경기도" <%= postDetail.category === '경기도' ? 'selected' : '' %>>경기도</option>
                        <option value="강원도" <%= postDetail.category === '강원도' ? 'selected' : '' %>>강원도</option>
                        <option value="충청북도" <%= postDetail.category === '충청북도' ? 'selected' : '' %>>충청북도</option>
                        <option value="충청남도" <%= postDetail.category === '충청남도' ? 'selected' : '' %>>충청남도</option>
                        <option value="전라북도" <%= postDetail.category === '전라북도' ? 'selected' : '' %>>전라북도</option>
                        <option value="전라남도" <%= postDetail.category === '전라남도' ? 'selected' : '' %>>전라남도</option>
                        <option value="경상북도" <%= postDetail.category === '경상북도' ? 'selected' : '' %>>경상북도</option>
                        <option value="경상남도" <%= postDetail.category === '경상남도' ? 'selected' : '' %>>경상남도</option>
                        <option value="제주도" <%= postDetail.category === '제주도' ? 'selected' : '' %>>제주도</option>
                    </select>
                    <textarea name="content" id="content" cols="30" rows="10"><%= postDetail.content %></textarea>
                </form>

                <div class="icons">
                        <button class="btn_edit" id="btn_edit" onclick="updatePost('<%= postDetail.p_seq %>')">수정하기</button>
                        <button class="btn_delete" id="btn_delete" onclick="deletePost('<%= postDetail.p_seq %>')">삭제하기</button>
                </div>
            </div>
        <script>
            (async () => {
                const accessToken = localStorage.getItem("accessToken");
                const iconsDiv = document.querySelector(".icons");
                let currentUserInfo = {};
                try {
                    const response = await axios({
                    method: "POST",
                    url: "/posts/accesstoken",
                    headers: {
                    Authorization: `Bearer ${accessToken}`,
                    },
                });

                    currentUserInfo = response.data;
                    console.log(currentUserInfo)
                } catch (error) {
                    console.error("사용자 정보 가져오기 에러:", error);
                }

                // 하트 아이콘과 채팅 버튼 추가 함수
                function addInteractiveIcons() {
                    const heartIcon = document.createElement("i");
                    heartIcon.className = "bi bi-heart";
                    heartIcon.id = "heart-icon";

                    const chatButton = document.createElement("button");
                    chatButton.textContent = "채팅하기";
                    chatButton.className = "btn_chat";
                    chatButton.addEventListener("click", chatButtonClicked);

                    iconsDiv.appendChild(heartIcon);
                    iconsDiv.appendChild(chatButton);

                    heartIcon.addEventListener("click", async function () {
                        let likeCount = parseInt(document.getElementById("like-count").textContent) || 0;

                        // 클래스를 토글하기 전에 현재 '좋아요' 상태를 확인합니다.
                        let isLiked = this.classList.contains("bi-heart-fill");

                        // 클래스를 토글합니다.
                        this.classList.toggle("bi-heart");
                        this.classList.toggle("bi-heart-fill");

                        // 'isLiked' 변수 업데이트: 만약 'bi-heart-fill' 클래스가 존재한다면, 이제 '좋아요' 상태입니다.
                        isLiked = !isLiked;

                        try {
                            const currentUrl = window.location.href;
                            const parsedUrl = new URL(currentUrl);
                            const segments = parsedUrl.pathname.split('/');
                            const currentPseq = segments.pop(); // 현재 url의 가장 끝 값인 p_seq 가져오는 과정
                            
                            const response = await axios({
                                method: isLiked ? "POST" : "DELETE", // 'isLiked' 상태에 따라 요청 메소드를 결정합니다.
                                url: "/likes",
                                headers: {
                                    Authorization: `Bearer ${accessToken}`,
                                },
                                data: {
                                    currentPseq: currentPseq
                                }
                            });

                            if (response.status === 200) {
                                // 요청 성공 시 'like-count'를 업데이트합니다.
                                document.getElementById("like-count").textContent = isLiked ? ++likeCount : --likeCount;
                            } else {
                                // 서버에서 요청을 처리하지 못했다면 UI 상태를 이전으로 되돌립니다.
                                this.classList.toggle("bi-heart");
                                this.classList.toggle("bi-heart-fill");
                            }
                        } catch (error) {
                            console.error("좋아요 상태 변경 에러:", error);
                            // 에러 발생 시 UI 상태를 이전으로 되돌립니다.
                            this.classList.toggle("bi-heart");
                            this.classList.toggle("bi-heart-fill");
                        }
                    });
                }

                // 게시글 작성자가 아니거나 로그인하지 않은 사용자에 대한 편집 기능 비활성화
                function disableEdit() {
                    document.getElementById("btn_edit").style.display = "none";
                    document.getElementById("btn_delete").style.display = "none";
                    document.getElementById("title").disabled = true;
                    document.getElementById("category").disabled = true;
                    document.getElementById("content").disabled = true;

                    // 하트 아이콘과 채팅 버튼 추가
                    addInteractiveIcons();
                }

                // accessToken이 존재하는 경우에만 사용자를 확인
                if (accessToken) {
                    try {
                        const response = await axios({
                        method: "POST",
                        url: "/posts/accesstoken",
                        headers: {
                            Authorization: `Bearer ${accessToken}`,
                        },
                    });

                    if (response.data.result) {
                        const currentUserNickname = response.data.nickname;
                        const authorNickname = '<%= postDetail.User.nickname %>';

                        if (currentUserNickname !== authorNickname) {
                            disableEdit();
                        } else {
                            // 작성자와 로그인한 사용자가 일치하는 경우
                            document.getElementById("btn_edit").style.display = "block";
                            document.getElementById("btn_delete").style.display = "block";
                        }
                    } else {
                        console.log("사용자 정보 가져오기 실패");
                        disableEdit();
                    }
                    } catch (error) {
                        console.error("사용자 정보 가져오기 에러:", error);
                        disableEdit();
                        }
                } else {
                    // accessToken이 없으면 로그인하지 않은 것으로 처리
                    disableEdit();
                }

            function chatButtonClicked() { //여기에다 p_seq 넣기? 그러면 p_seq 정의는?
                // console.log("채팅하기 버튼 클릭됨"); // 클릭 이벤트 리스너 확인
                const accessToken = localStorage.getItem("accessToken");
                // console.log("accessToken:", accessToken);

                    if (!accessToken) {
                        // 로그인되어 있지 않은 경우, 로그인 확인 메시지 표시
                        const confirmLogin = confirm("채팅을 하려면 로그인이 필요합니다. 로그인하시겠습니까?");
                        if (confirmLogin) {
                            // 사용자가 확인을 선택한 경우, 로그인 페이지로 이동
                             window.location.href = "/users/signin";
                        }
                        // 사용자가 취소를 선택한 경우, 함수 종료
                        return;
                    }
                    
                console.log("채팅하기 버튼 클릭됨"); // 클릭 이벤트 리스너 확인

                console.log("axios 요청 전송 준비", {
                    b_nick: '<%= postDetail.User.nickname %>',
                    b_seq: '<%= postDetail.User.u_seq %>',
                    u_seq: currentUserInfo.u_seq,
                    u_nick: currentUserInfo.nickname,
                    id: currentUserInfo.id
                });

                // /rooms/:p_seq

                console.log('<%= postDetail.p_seq %>');
                axios.post(`/chats/rooms/${'<%= postDetail.p_seq %>'}`, { // 어디로 보내야 하는지, 파라미터 p_seq를 여기에 쓴다?
                    b_nick: '<%= postDetail.User.nickname %>',
                    b_seq: '<%= postDetail.User.u_seq %>',
                    u_seq: currentUserInfo.u_seq,
                    u_nick: currentUserInfo.nickname,
                    id: currentUserInfo.id
                }, {
                    headers: {
                        "Content-Type": "application/json",
                        "Authorization": `Bearer ${localStorage.getItem("accessToken")}`,
                    }
                })
                .then((response)=> {
                    console.log("axios 요청 성공", response.data); // 요청 성공 시 로그
                })
                .catch(function(error) {
                    console.error("Error:", error);
                    alert('채팅방 생성에 실패했습니다.');
                });
            }

            
            })();

            async function deletePost(postId) {
                try {
                    const accessToken = localStorage.getItem("accessToken");
                    const response = await axios({
                        method: "DELETE",
                        url: `/posts/detail/${postId}`,
                        headers: {
                            Authorization: `Bearer ${accessToken}`,
                        },
                    });

                    if (response.status === 200) {
                        alert('게시글이 성공적으로 삭제되었습니다.');
                        window.location.href = '/posts/list';
                    }
                } catch (error) {
                    console.error(error);
                    alert('게시글 삭제에 실패했습니다.');
                    }
                }

            async function updatePost(postId) {
                try {
                    const title = document.getElementById("title").value;
                    const category = document.getElementById("category").value;
                    const content = document.getElementById("content").value;
                    const accessToken = localStorage.getItem("accessToken");

                    const response = await axios({
                        method: "PATCH",
                        url: `/posts/detail/${postId}`,
                        data: JSON.stringify({ title, category, content }),
                        headers: {
                            'Authorization': `Bearer ${accessToken}`,
                            'Content-Type': 'application/json',
                        },
                    });

                    if (response.status === 200) {
                        alert('게시글이 성공적으로 수정되었습니다.');
                        window.location.href = `/posts/list`;
                    }
                } catch (error) {
                    console.error(error);
                    alert('게시글 수정에 실패했습니다.');
                }
            }

            
        </script>
    </body>
</html>
